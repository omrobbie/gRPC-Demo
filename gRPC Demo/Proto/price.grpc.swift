//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: price.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Streaming_PriceFeedClient`, then call methods of this protocol to make API calls.
internal protocol Streaming_PriceFeedClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? { get }

  func getPriceFeed(
    _ request: Streaming_Request,
    callOptions: CallOptions?,
    handler: @escaping (Streaming_Response) -> Void
  ) -> ServerStreamingCall<Streaming_Request, Streaming_Response>

  func getOneTimePrice(
    _ request: Streaming_Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Streaming_Request, Streaming_Response>

  func getOneTimePriceEncrypted(
    _ request: Streaming_EncryptedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Streaming_EncryptedRequest, Streaming_EncryptedResponse>
}

extension Streaming_PriceFeedClientProtocol {
  internal var serviceName: String {
    return "streaming.PriceFeed"
  }

  /// Server streaming call to GetPriceFeed
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPriceFeed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getPriceFeed(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil,
    handler: @escaping (Streaming_Response) -> Void
  ) -> ServerStreamingCall<Streaming_Request, Streaming_Response> {
    return self.makeServerStreamingCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getPriceFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceFeedInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetOneTimePrice
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOneTimePrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOneTimePrice(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Streaming_Request, Streaming_Response> {
    return self.makeUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceInterceptors() ?? []
    )
  }

  /// Unary call to GetOneTimePriceEncrypted
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOneTimePriceEncrypted.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOneTimePriceEncrypted(
    _ request: Streaming_EncryptedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Streaming_EncryptedRequest, Streaming_EncryptedResponse> {
    return self.makeUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePriceEncrypted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceEncryptedInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Streaming_PriceFeedClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Streaming_PriceFeedNIOClient")
internal final class Streaming_PriceFeedClient: Streaming_PriceFeedClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the streaming.PriceFeed service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Streaming_PriceFeedNIOClient: Streaming_PriceFeedClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol?

  /// Creates a client for the streaming.PriceFeed service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Streaming_PriceFeedAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? { get }

  func makeGetPriceFeedCall(
    _ request: Streaming_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Streaming_Request, Streaming_Response>

  func makeGetOneTimePriceCall(
    _ request: Streaming_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Streaming_Request, Streaming_Response>

  func makeGetOneTimePriceEncryptedCall(
    _ request: Streaming_EncryptedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Streaming_EncryptedRequest, Streaming_EncryptedResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Streaming_PriceFeedAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Streaming_PriceFeedClientMetadata.serviceDescriptor
  }

  internal var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetPriceFeedCall(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Streaming_Request, Streaming_Response> {
    return self.makeAsyncServerStreamingCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getPriceFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceFeedInterceptors() ?? []
    )
  }

  internal func makeGetOneTimePriceCall(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Streaming_Request, Streaming_Response> {
    return self.makeAsyncUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceInterceptors() ?? []
    )
  }

  internal func makeGetOneTimePriceEncryptedCall(
    _ request: Streaming_EncryptedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Streaming_EncryptedRequest, Streaming_EncryptedResponse> {
    return self.makeAsyncUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePriceEncrypted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceEncryptedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Streaming_PriceFeedAsyncClientProtocol {
  internal func getPriceFeed(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Streaming_Response> {
    return self.performAsyncServerStreamingCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getPriceFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceFeedInterceptors() ?? []
    )
  }

  internal func getOneTimePrice(
    _ request: Streaming_Request,
    callOptions: CallOptions? = nil
  ) async throws -> Streaming_Response {
    return try await self.performAsyncUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceInterceptors() ?? []
    )
  }

  internal func getOneTimePriceEncrypted(
    _ request: Streaming_EncryptedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Streaming_EncryptedResponse {
    return try await self.performAsyncUnaryCall(
      path: Streaming_PriceFeedClientMetadata.Methods.getOneTimePriceEncrypted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOneTimePriceEncryptedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Streaming_PriceFeedAsyncClient: Streaming_PriceFeedAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Streaming_PriceFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Streaming_PriceFeedClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getPriceFeed'.
  func makeGetPriceFeedInterceptors() -> [ClientInterceptor<Streaming_Request, Streaming_Response>]

  /// - Returns: Interceptors to use when invoking 'getOneTimePrice'.
  func makeGetOneTimePriceInterceptors() -> [ClientInterceptor<Streaming_Request, Streaming_Response>]

  /// - Returns: Interceptors to use when invoking 'getOneTimePriceEncrypted'.
  func makeGetOneTimePriceEncryptedInterceptors() -> [ClientInterceptor<Streaming_EncryptedRequest, Streaming_EncryptedResponse>]
}

internal enum Streaming_PriceFeedClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PriceFeed",
    fullName: "streaming.PriceFeed",
    methods: [
      Streaming_PriceFeedClientMetadata.Methods.getPriceFeed,
      Streaming_PriceFeedClientMetadata.Methods.getOneTimePrice,
      Streaming_PriceFeedClientMetadata.Methods.getOneTimePriceEncrypted,
    ]
  )

  internal enum Methods {
    internal static let getPriceFeed = GRPCMethodDescriptor(
      name: "GetPriceFeed",
      path: "/streaming.PriceFeed/GetPriceFeed",
      type: GRPCCallType.serverStreaming
    )

    internal static let getOneTimePrice = GRPCMethodDescriptor(
      name: "GetOneTimePrice",
      path: "/streaming.PriceFeed/GetOneTimePrice",
      type: GRPCCallType.unary
    )

    internal static let getOneTimePriceEncrypted = GRPCMethodDescriptor(
      name: "GetOneTimePriceEncrypted",
      path: "/streaming.PriceFeed/GetOneTimePriceEncrypted",
      type: GRPCCallType.unary
    )
  }
}

